; CDECL Example
;
; This code is in the public domain via the CC0 public domain decleration
; See LICENSE in the top level directory for more information
;
; Compile with NASM to COM: i.e. nasm cdecl_example.asm -o cdecl.com

section .text
org 0x100

jmp example_call

value_is_9 db `Returned value from _example is 9$`
value_not_9 db `Returned value is not 9$`

_example:
	; Setup stack frame
	push bp
	mov bp, sp

	; The stack now has the following layout
	; bp[+2] stack frame
	; bp[+4] int a
	; bp[+6] int b

	; Move values from the stack to registers
	mov ax, [bp+4]
	mov bx, [bp+6]
	add ax, bx
	
	pop bp
	ret

example_call:
	mov ax, 4
	mov bx, 5
	
	; Arguments go in left to right
	push ax
	push bx
	
	; Under CDECL, names are decerated with a _ to indicate
	; they're a function, so example becomes _example
	call _example
	
	; Now we need to clean the stack up
	add sp, 4
	
	; The return value (9) comes back in ax
	; all other registers are smashed (aka their
	; values are not perserved into or out of the
	; function)
	
	cmp ax, 9
	je is_nine
	
	; Not nine
	mov dx, value_not_9
	jmp done

	is_nine:
		mov dx, value_is_9
	

	done:
	xor ax, ax
	mov ah, 9	
    int 0x21

	; Leave dos
	mov ah, 0x4C
	mov al, 0
	int 0x21
